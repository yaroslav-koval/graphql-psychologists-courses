package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	"github.com/yaroslav-koval/graphql-psychologists-courses/bunmodels"
	"github.com/yaroslav-koval/graphql-psychologists-courses/graph/model"
)

func (r *courseResolver) Psychologists(ctx context.Context, obj *bunmodels.Course) ([]*bunmodels.Psychologist, error) {
	return r.em.GetCoursePsychologists(ctx, obj.ID)
}

func (r *courseResolver) Lessons(ctx context.Context, obj *bunmodels.Course) ([]*bunmodels.Lesson, error) {
	return r.em.GetCourseLessons(ctx, obj.ID)
}

func (r *lessonResolver) Course(ctx context.Context, obj *bunmodels.Lesson) (*bunmodels.Course, error) {
	return r.em.GetCourseByID(ctx, obj.CourseID)
}

func (r *mutationResolver) CreatePsychologist(ctx context.Context, input model.NewPsychologist) (*bunmodels.Psychologist, error) {
	return r.em.CreatePsychologist(ctx, input)
}

func (r *mutationResolver) UpdatePsychologist(ctx context.Context, input model.UpdatePsychologist) (*bunmodels.Psychologist, error) {
	return r.em.UpdatePsychologist(ctx, input)
}

func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*bunmodels.Course, error) {
	return r.em.CreateCourse(ctx, input)
}

func (r *mutationResolver) UpdateCourse(ctx context.Context, input model.UpdateCourse) (*bunmodels.Course, error) {
	return r.em.UpdateCourse(ctx, input)
}

func (r *mutationResolver) CreateLesson(ctx context.Context, input model.NewLesson) (*bunmodels.Lesson, error) {
	return r.em.CreateLesson(ctx, input)
}

func (r *mutationResolver) UpdateLesson(ctx context.Context, input model.UpdateLesson) (*bunmodels.Lesson, error) {
	return r.em.UpdateLesson(ctx, input)
}

func (r *psychologistResolver) Courses(ctx context.Context, obj *bunmodels.Psychologist) ([]*bunmodels.Course, error) {
	return r.em.GetPsychologistCourses(ctx, obj.ID)
}

func (r *queryResolver) Psychologist(ctx context.Context, id string) (*bunmodels.Psychologist, error) {
	return r.em.GetPsychologistByID(ctx, id)
}

func (r *queryResolver) Psychologists(ctx context.Context) ([]*bunmodels.Psychologist, error) {
	return r.em.GetAllPsychologists(ctx)
}

func (r *queryResolver) Course(ctx context.Context, id string) (*bunmodels.Course, error) {
	return r.em.GetCourseByID(ctx, id)
}

func (r *queryResolver) Courses(ctx context.Context) ([]*bunmodels.Course, error) {
	return r.em.GetAllCourses(ctx)
}

func (r *queryResolver) Lesson(ctx context.Context, id string) (*bunmodels.Lesson, error) {
	return r.em.GetLessonByID(ctx, id)
}

func (r *queryResolver) Lessons(ctx context.Context) ([]*bunmodels.Lesson, error) {
	return r.em.GetAllLessons(ctx)
}

func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

func (r *Resolver) Lesson() LessonResolver { return &lessonResolver{r} }

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Psychologist() PsychologistResolver { return &psychologistResolver{r} }

func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type courseResolver struct{ *Resolver }
type lessonResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type psychologistResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
