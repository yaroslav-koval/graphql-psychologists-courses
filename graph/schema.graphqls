directive @goModel(
    model: String
    models: [String!]
    forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
    forceResolver: Boolean
    name: String
    omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Psychologist {
    id: ID!
    name: String!
    description: String
    courses: [Course] @goField(forceResolver: true)
}

type Course {
    id: ID!
    name: String!
    description: String
    price: Int!
    psychologists: [Psychologist!]! @goField(forceResolver: true)
    lessons: [Lesson!]! @goField(forceResolver: true)
}

type Lesson {
    id: ID!
    name: String!
    number: Int!
    course: Course! @goField(forceResolver: true)
}

type Query {
    psychologist(id: ID!): Psychologist!
    psychologists: [Psychologist!]!
    course(id: ID!): Course!
    courses: [Course!]!
    lesson(id: ID!): Lesson!
    lessons: [Lesson!]!
}

input NewPsychologist {
    name: String!
    description: String
}

input UpdatePsychologist {
    id: ID!
    name: String!
    description: String
}

input NewCourse {
    name: String!
    description: String
    price: Int!
    psychologists: [ID!]!
}

input UpdateCourse {
    id: ID!
    name: String!
    description: String
    price: Int!
}

input NewLesson {
    name: String!
    number: Int!
    course: ID!
}

input UpdateLesson {
    id: ID!
    name: String!
    number: Int!
}

type Mutation {
    createPsychologist(input: NewPsychologist!): Psychologist!
    updatePsychologist(input: UpdatePsychologist!): Psychologist!
    createCourse(input: NewCourse!): Course!
    updateCourse(input: UpdateCourse!): Course!
    createLesson(input: NewLesson!): Lesson!
    updateLesson(input: UpdateLesson!): Lesson!
}
